
add_library(VULKAN INTERFACE)
target_include_directories(VULKAN INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/vulkan")
if (WIN32)
    target_link_libraries(VULKAN INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/vulkan/lib/win32/vulkan-1.lib")
elseif (UNIX)
    target_link_libraries(VULKAN INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/vulkan/lib/linux/vulkan-1.lib")
endif ()
# target_link_libraries(VULKAN INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/vulkan/lib/linux/vulkan-1.lib")


add_library(GLSLANG INTERFACE)
target_include_directories(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang")

if (WIN32)
    if (IS_DEBUG)
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/win32/deb/GenericCodeGend.lib")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/win32/deb/glslangd.lib")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/win32/deb/HLSLd.lib")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/win32/deb/MachineIndependentd.lib")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/win32/deb/OGLCompilerd.lib")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/win32/deb/OSDependentd.lib")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/win32/deb/SPIRVd.lib")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/win32/deb/SPIRV-Toolsd.lib")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/win32/deb/SPIRV-Tools-optd.lib")
    else ()
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/win32/rel/GenericCodeGen.lib")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/win32/rel/glslang.lib")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/win32/rel/HLSL.lib")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/win32/rel/MachineIndependent.lib")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/win32/rel/OGLCompiler.lib")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/win32/rel/OSDependent.lib")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/win32/rel/SPIRV.lib")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/win32/rel/SPIRV-Tools.lib")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/win32/rel/SPIRV-Tools-opt.lib")
    endif ()
elseif (UNIX)
    if (IS_DEBUG)
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/linux/deb/libHLSL.a")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/linux/deb/libglslang.a")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/linux/deb/libMachineIndependent.a")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/linux/deb/libOSDependent.a")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/linux/deb/libOGLCompiler.a")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/linux/deb/libGenericCodeGen.a")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/linux/deb/libSPIRV.a")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/linux/deb/libSPIRV-Tools-opt.a")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/linux/deb/libSPIRV-Tools.a")
    else ()
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/linux/rel/libHLSL.a")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/linux/rel/libglslang.a")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/linux/rel/libMachineIndependent.a")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/linux/rel/libOSDependent.a")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/linux/rel/libOGLCompiler.a")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/linux/rel/libGenericCodeGen.a")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/linux/rel/libSPIRV.a")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/linux/rel/libSPIRV-Tools-opt.a")
        target_link_libraries(GLSLANG INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/glslang/lib/linux/rel/libSPIRV-Tools.a")
    endif ()
endif ()

add_library(SQLite INTERFACE)
target_include_directories(SQLite INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/sqlite/public/")
if (WIN32)
    target_link_libraries(SQLite INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/sqlite/windows/SQLite.lib")
elseif (UNIX)
    target_link_libraries(SQLite INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/sqlite/linux/libsqlite3.a")
endif ()

add_library(STB_IMAGE INTERFACE)
target_include_directories(STB_IMAGE INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/stb_image/public/")

add_library(IMGUI STATIC ./ThirdParty/imgui/imgui.cpp ./ThirdParty/imgui/imgui_draw.cpp ./ThirdParty/imgui/imgui_demo.cpp ./ThirdParty/imgui/imgui_tables.cpp ./ThirdParty/imgui/imgui_widgets.cpp ./ThirdParty/imgui/backends/imgui_impl_vulkan.cpp)
target_include_directories(IMGUI PUBLIC ./ThirdParty/imgui)
target_link_libraries(IMGUI PUBLIC VULKAN)

